{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c2f0b491-1a79-4eed-8625-c58319ff88a8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ef5a1c9e-0711-4a7b-9cea-b12a868002f3/resourceGroups/bw-synapse-rg/providers/Microsoft.Synapse/workspaces/bw-synapse-ws/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://bw-synapse-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load(path='abfss://demo@bwsynapseadls.dfs.core.windows.net/NYCTripSmall.parquet',format='parquet')\r\n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql('CREATE DATABASE IF NOT EXISTS nyctaxi')\r\n",
					"df.write.mode('overwrite').saveAsTable('nyctaxi.trip')"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df=spark.sql('SELECT * FROM nyctaxi.trip')\r\n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"\"\"\r\n",
					"SELECT PassengerCount,\r\n",
					"        SUM(TripDistanceMiles) as SumTripDistance,\r\n",
					"        AVG(TripDistanceMiles) as AvgTripDistance\r\n",
					"from nyctaxi.trip\r\n",
					"WHERE TripDistanceMiles>0 and PassengerCount>0\r\n",
					"GROUP BY PassengerCount\r\n",
					"ORDER BY PassengerCount\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"display(df)\r\n",
					"df.write.saveAsTable('nyctaxi.passengerscountstat')"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df=spark.sql('SELECT * FROM nyctaxi.passengerscountstat')\r\n",
					"display(df)"
				],
				"execution_count": 10
			}
		]
	}
}